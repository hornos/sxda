#!/bin/bash

### global
gbn=$(basename ${BASH_SOURCE})
grd=$(dirname ${BASH_SOURCE})

### vars
sxda_url="http://www.mpie.de/index.php?id=3281&L=1%C3%82%C2%A8type%3D1%2F%21intitle"
sxda_url_man="http://www.mpie.de/fileadmin/pics/CM-pics/Common/SPHInX/sxdefectalign-manual.pdf"
sxda_bin_url="http://www.mpie.de/fileadmin/pics/CM-pics/Common/SPHInX/sxdefectalign.gz"
sxda_bin="${grd}/sxdefectalign"
sxda_long="long.dat"
sxda_short="short.dat"

### unit conversion
sxda_ev2ry=0.073498618
sxda_ang2bohr=1.889725989

### help
function help/sxda() {
  cat << EOF
Usage: ${gbn} options
              -i input.dat - parameter file
              -a x|y|z     - profile axis
              -l label     - plot label
              -y range     - gnuplot y axis range [min:max]
              -m           - show manual
              -p           - plot
              -d           - download binary
              -r           - remove species
              -t           - use remove species files
              -v           - verbose
              -h           - help

Plot will produce figure similar to PSS B 248 No 5, 1071 Figure 3.
EOF
echo ""
echo "URL: ${sxda_url}"

  exit 1
}

function sxda/man() {
  local _m="${1:-${sxda_url_man}}"
  lynx "${_m}"
  exit $?
}

function sxda/get() {
  local _url="${1:-${sxda_bin_url}}"
  local _bin="${2:-${sxda_bin}}"

  echo "Download: ${_url}"
  wget -U "" -T 5 -qO- "${_url}" > "${_bin}.gz"
  if test $? -gt 0 ; then
    echo "Download failed"
    exit 1
  fi
  gunzip -fv "${_bin}.gz"
  chmod a+x "${_bin}"
  exit $?
}

function sxda/plot() {
  local _s="${1:-short.dat}"
  local _l="${2:-long.dat}"
  local _plot="${gbn}.plot"
  local _d=""
  for _d in "${_s}" "${_l}" ; do
    if ! test -r "${_d}" ; then
      echo "${_d} not found"
      return 1
    fi
  done 

  cat << EOF > "${_plot}"
set title "${sxda_label} Axis ${_a}"
set ylabel "Elstat. pot. LOCPOT"
set xlabel "Distance (Bohr)"
EOF
  if ! test -z "${sxda_yr}" ; then
    echo "set yr ${sxda_yr}" >> "${_plot}"
  fi
  cat << EOF >> "${_plot}"
plot '${_s}' using 1:2 title 'Def-Ref' with lines, \
     '${_s}' using 1:3 title 'Short' with lines, \
     '${_l}' using 1:2 title 'Long' with lines
f(x)=0.0
replot f(x) title 'Zero' with lines
set term png
set output "plot_${_a}.png"
replot
set term postscript
set output "plot_${_a}.ps"
replot
set term x11
EOF
  gnuplot -persist "${_plot}"
}

### args
_i=""
_a="z"
_r=false
_t=false
_v=false
sxda_label=""
sxda_yr=""
while getopts hvmdrtpi:a:l:y: o; do
  case "$o" in
    h) help/sxda;;
    m) sxda/man;;
    d) sxda/get;;
    r) _r=true;;
    t) _t=true;;
    v) _v=true;;
    l) sxda_label=$OPTARG;;
    y) sxda_yr=$OPTARG;;
    p) sxda/plot "${sxda_short}" "${sxda_long}"
       exit $?;;
    a) _a=$OPTARG;;
    i) _i=$OPTARG;;
  esac
done

case ${_a} in
  x) _axis=1;;
  y) _axis=2;;
  z) _axis=3;;
  *) _axis=1;;
esac

### parameters
_inp="${_i:-./${gbn}.dat}"
_out="./vline-eV.dat"
if ! test -r "${_inp}" ; then
  echo "${_inp} not found"
  exit 1
fi

source "${_inp}"

### main
for pot in "${VREF}" "${VDEF}" ; do
  if ! test -r "${pot}" ; then
    echo "Not found: ${pot}"
    exit 1
  fi
done

if ${_r} ; then
  echo -n "Remove species:"
  for pot in "${VREF}" "${VDEF}" ; do
    _pot="${pot}.tmp"
    if test -r "${_pot}" ; then
      continue
    fi
    echo -n " ${pot}"
    cat "${pot}" | \
    awk '{if(!match($0,"([A-Z][a-z] +)+")) print}' > "${_pot}"
  done
  VREF="${VREF}.tmp"
  VDEF="${VDEF}.tmp"
fi

if ${_t} ; then
  VREF="${VREF}.tmp"
  VDEF="${VDEF}.tmp"
fi

_ecut=""
_ecut_ry=$(echo "${ECUT}*${sxda_ev2ry}" | bc)
_ecut="--ecut ${_ecut_ry}"

### General Options
echo ""
echo "Reference : ${VREF}"
echo "Defect    : ${VDEF}"
echo "Cutoff    : ${_ecut_ry} Ry (${ECUT} eV)"
echo "Int. Axis : ${_a}"

_charge=""
if ! test -z "${CHARGE}" ; then
  echo "Charge    : ${CHARGE} (real: $((-1*${CHARGE})))"
  _charge="--charge ${CHARGE}"
else
  echo "Charge    : default"
fi

_eps=""
if ! test -z "${EPS}" ; then
  _eps="--eps ${EPS}"
  echo "Dielec.   : ${EPS}"
else
  echo "Dielec.   : default"
fi

_shift=""
if ! test -z "${SHIFT}" ; then
  echo "Shift (C) : ${SHIFT}"
  _shift="-C ${SHIFT}"
fi

### Gauss Options
_beta=""
if ! test -z "${BETA}" ; then
  _beta_br=${BETA}
  # _beta_br=$(echo "${BETA}*${sxda_ang2bohr}" | bc)
  # echo "Beta      : ${_beta_br} bohr (${_beta} Ang)"
  _beta="--beta ${_beta_br}"
fi

_gamma=""
if ! test -z "${GAMMA}" ; then
  _gamma="--gamma ${GAMMA}"
  echo "Gamma     : ${GAMMA}"
fi

_expnorm=""
if ! test -z "${EXPNORM}" ; then
  _expnorm="--expnorm ${EXPNORM}"
  echo "Expnorm   : ${EXPNORM}"
fi

_average=""
if ! test -z "${AVERAGE}" ; then
  _average="--average ${AVERAGE}"
  echo "Average   : ${AVERAGE}"
fi

_pos=""
if ! test -z "${POS}" ; then
  _pos="--relative --pos \"${POS}\""
fi

echo ""
echo -n "Calculate correction? (y/n) "
read _ans
case "${_ans}" in
  "n" | "no" | "q"  )
  exit 1;;
esac


### defect algin
_cmd="${sxda_bin} --vasp ${_ecut} ${_charge}"
_cmd="${_cmd} ${_eps} ${_shift} ${_beta} ${_gamma} ${_expnorm}"
_cmd="${_cmd} ${_average} ${_pos}"
_cmd="${_cmd} -a${_axis} --vref \"${VREF}\" --vdef \"${VDEF}\""

if ${_v} ; then
  echo "Command:"
  echo "${_cmd}"
  echo ""
fi
eval ${_cmd}

### check
if ! test -r "${_out}" ; then
  echo "${_out} not found"
  exit 1
fi

### process output

echo "#   ${_a}           V(long)"                  > "${sxda_long}"
cat "${_out}" | \
awk '{if(NF==2) printf "%12.6f %12.6f\n", $1, $2}' >> "${sxda_long}"

echo
echo "#   ${_a}           V(def)-V(ref) V(short)"              > "${sxda_short}"
cat "${_out}" | \
awk '{if(NF==3) printf "%12.6f %12.6f %12.6f\n", $1, $2, $3}' >> "${sxda_short}"

echo -n "Plot potentials? (y/n) "
read _ans
case "${_ans}" in
  "y" | "yes" | "" )
    sxda/plot "${sxda_short}" "${sxda_long}"
    ;;
esac
